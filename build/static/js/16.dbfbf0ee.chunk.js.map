{"version":3,"sources":["app/dashboard/Dashboard.js"],"names":["Dashboard","props","amountDueBarOptions","layout","padding","left","right","top","bottom","scales","responsive","maintainAspectRatio","yAxes","display","gridLines","color","xAxes","barPercentage","legend","events","dragStart","event","dragEnd","state","options","edges","nodes","physics","enabled","interaction","multiselect","dragView","graph","id","label","from","to","startDate","Date","todos","task","isCompleted","inputValue","statusChangedHandler","bind","addTodo","removeTodo","inputChangeHandler","todo","this","target","checked","setState","preventDefault","unshift","length","index","splice","value","document","addEventListener","e","className","style","height","onSubmit","type","placeholder","onChange","required","map","ListItem","changed","key","remove","Component","htmlFor","children","onClick"],"mappings":"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","file":"static/js/16.dbfbf0ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Graph from \"../../../node_modules/react-graph-vis\";\n\n// import DatePicker from 'react-datepicker';\n// import { Dropdown } from 'react-bootstrap';\n\nexport class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        layout: {\n          // hierarchical: true,\n        },\n        edges: {\n          color: \"#000000\"\n        },\n        nodes: {\n          color: \"#3EA4F7\"\n        },\n        physics: {\n          enabled: true\n        },\n        interaction: { multiselect: true, dragView: true }\n      },\n      graph: {\n        nodes: [\n          { id: 1, label: \"Node 1\" },\n          { id: 2, label: \"Node 2\" },\n          { id: 3, label: \"Node 3\" },\n          { id: 4, label: \"Node 4\" },\n          { id: 5, label: \"Node 5\" }\n        ],\n        edges: [\n          { from: 1, to: 2 },\n          { from: 1, to: 3 },\n          { from: 2, to: 4 },\n          { from: 2, to: 5 }\n        ]\n      },\n      startDate: new Date(),\n      todos: [\n        {\n          id: 1,\n          task: 'Learn tutorial about microservices',\n          isCompleted: false\n        },\n        {\n          id: 2,\n          task: 'Prepare for presentation',\n          isCompleted: false\n        },\n        {\n          id: 3,\n          task: 'Upload tutorial on Eureka server',\n          isCompleted: false\n        },\n      ],\n      inputValue: '',\n    }\n    this.statusChangedHandler = this.statusChangedHandler.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.inputChangeHandler = this.inputChangeHandler.bind(this);\n  }\n  statusChangedHandler(event, id) {\n    const todo = { ...this.state.todos[id] };\n    todo.isCompleted = event.target.checked;\n\n    const todos = [...this.state.todos];\n    todos[id] = todo;\n\n    this.setState({\n      todos: todos\n    })\n  }\n\n  addTodo(event) {\n    event.preventDefault();\n\n    const todos = [...this.state.todos];\n    todos.unshift({\n      id: todos.length ? todos[todos.length - 1].id + 1 : 1,\n      task: this.state.inputValue,\n      isCompleted: false\n\n    })\n\n    this.setState({\n      todos: todos,\n      inputValue: ''\n    })\n  }\n\n  removeTodo(index) {\n    const todos = [...this.state.todos];\n    todos.splice(index, 1);\n\n    this.setState({\n      todos: todos\n    })\n  }\n\n  inputChangeHandler(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n\n  amountDueBarOptions = {\n    layout: {\n      padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }\n    },\n\n    scales: {\n      responsive: true,\n      maintainAspectRatio: true,\n      yAxes: [{\n        display: false,\n        gridLines: {\n          color: 'rgba(0, 0, 0, 0.03)',\n        }\n      }],\n      xAxes: [{\n        display: false,\n        barPercentage: 0.4,\n        gridLines: {\n          display: false,\n        }\n      }]\n    },\n    legend: {\n      display: false\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", e => { });\n    document.addEventListener(\"mousemove\", e => { });\n  }\n\n  events = {\n    dragStart: event => { },\n    dragEnd: event => { }\n  };\n  render() {\n    return (\n      <div>\n\n        <div className=\"row\">\n\n          <div className=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 grid-margin stretch-card\">\n            <div className=\"card card-statistics\">\n              <div className=\"card-body\">\n                <div className=\"clearfix\">\n                  <div className=\"float-left\">\n                    <i className=\"mdi mdi-account-box-multiple text-info icon-lg\"></i>\n                  </div>\n                  <div className=\"float-right\">\n                    <p className=\"mb-0 text-right text-dark\">Completed Courses</p>\n                    <div className=\"fluid-container\">\n                      <h3 className=\"font-weight-medium text-right mb-0 text-dark\">09</h3>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12 grid-margin\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div id=\"graph\" style={{ height: \"100vh\" }}>\n                  <Graph\n                    graph={this.state.graph}\n                    options={this.state.options}\n                    events={this.state.events}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xl-12 col-lg-12 col-sm-12  grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">Todo</h4>\n                <form className=\"add-items d-lg-flex\" onSubmit={this.addTodo}>\n                  <input\n                    type=\"text\"\n                    className=\"form-control h-auto\"\n                    placeholder=\"What do you need to do today?\"\n                    value={this.state.inputValue}\n                    onChange={this.inputChangeHandler}\n                    required />\n                  <button type=\"submit\" className=\"btn btn-primary font-weight-bold ml-0 mt-2 mt-lg-0\">Add</button>\n                </form>\n                <div className=\"list-wrapper\">\n                  <ul className=\"d-flex flex-column todo-list todo-padding-lg\">\n                    {this.state.todos.map((todo, index) => {\n                      return <ListItem\n                        isCompleted={todo.isCompleted}\n                        changed={(event) => this.statusChangedHandler(event, index)}\n                        key={todo.id}\n                        remove={() => this.removeTodo(index)}\n                      >{todo.task}</ListItem>\n                    })}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst ListItem = (props) => {\n  return (\n    <li className={(props.isCompleted ? 'completed' : null)}>\n      <div className=\"form-check form-check-success m-0 align-items-start\">\n        <label htmlFor=\"\" className=\"form-check-label font-weight-medium\">\n          <input className=\"checkbox\" type=\"checkbox\"\n            checked={props.isCompleted}\n            onChange={props.changed}\n          /> {props.children} <i className=\"input-helper\"></i>\n        </label>\n      </div>\n      <i className=\"remove mdi mdi-close-circle-outline\" onClick={props.remove}></i>\n    </li>\n  )\n};\nexport default Dashboard;"],"sourceRoot":""}