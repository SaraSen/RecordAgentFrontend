{"version":3,"sources":["app/form-elements/BasicElements.js"],"names":["require","BasicElements","state","startDate","Date","handleChange","date","setState","engine","SRD","installDefaultFactories","model","node1","port1","addOutPort","setPosition","node2","port2","addInPort","node3","node4","link1","link","addAll","setDiagramModel","className","aria-label","href","onClick","event","preventDefault","aria-current","diagramEngine","Component"],"mappings":"kSAGAA,EAAQ,KAGD,IAAMC,EAAb,2MAIEC,MAAQ,CACNC,UAAW,IAAIC,MALnB,EAQEC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZJ,UAAWG,KAVjB,wEAiBA,IAAIE,EAAS,IAAIC,gBACjBD,EAAOE,0BAGP,IAAIC,EAAQ,IAAIF,eAGZG,EAAQ,IAAIH,mBAAqB,SAAU,kBAC3CI,EAAQD,EAAME,WAAW,OAC7BF,EAAMG,YAAY,IAAK,KAGvB,IAAIC,EAAQ,IAAIP,mBAAqB,SAAU,kBAC3CQ,EAAQD,EAAME,UAAU,MAC5BF,EAAMD,YAAY,IAAK,KAEvB,IAAII,EAAQ,IAAIV,mBAAqB,SAAU,kBACnCU,EAAMD,UAAU,MAC5BC,EAAMJ,YAAY,IAAK,KAEvB,IAAIK,EAAQ,IAAIX,mBAAqB,SAAU,kBACnCW,EAAMF,UAAU,OAC5BE,EAAML,YAAY,IAAK,KAIvB,IAAIM,EAAQR,EAAMS,KAAKL,GAQnB,OAJJN,EAAMY,OAAOX,EAAOI,EAAOG,EAAOC,EAAOC,GAGzCb,EAAOgB,gBAAgBb,GAEjB,6BACE,yBAAKc,UAAU,eACb,wBAAIA,UAAU,cAAd,YACA,yBAAKC,aAAW,cACd,wBAAID,UAAU,cACZ,wBAAIA,UAAU,mBAAkB,uBAAGE,KAAK,KAAKC,QAAS,SAAAC,GAAK,OAAIA,EAAMC,mBAArC,WAChC,wBAAIL,UAAU,yBAAyBM,eAAa,QAApD,qCAIN,yBAAKN,UAAU,OAEb,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACf,kBAAC,gBAAD,CAAmBA,UAAU,kBAAkBO,cAAexB,aAnE5E,GAAmCyB,aA8EpBhC","file":"static/js/10.ea902f5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./BasicElements.scss\";\nimport * as SRD from \"storm-react-diagrams\";\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\n\nexport class BasicElements extends Component {\n\n  \n\n  state = {\n    startDate: new Date()\n  };\n \n  handleChange = date => {\n    this.setState({\n      startDate: date\n    });\n  };\n  render() {\n\n    \n// 1) setup the diagram engine\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nvar model = new SRD.DiagramModel();\n\n// 3) create a default node\nvar node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\nlet port1 = node1.addOutPort(\"Out\");\nnode1.setPosition(100, 100);\n\n// 4) create another default node\nvar node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\nlet port2 = node2.addInPort(\"In\");\nnode2.setPosition(400, 100);\n\nvar node3 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\nlet port3 = node3.addInPort(\"In\");\nnode3.setPosition(400, 200);\n\nvar node4 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(0,192,255)\");\nlet port4 = node4.addInPort(\"Out\");\nnode4.setPosition(400, 300);\n\n\n// 5) link the ports\nlet link1 = port1.link(port2);\n// let link2 = port3.link(port4)\n\n// 6) add the models to the root graph\nmodel.addAll(node1, node2, node3, node4, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\n    return (\n      <div>\n        <div className=\"page-header\">\n          <h3 className=\"page-title\"> Charts </h3>\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\"><a href=\"!#\" onClick={event => event.preventDefault()}>Charts</a></li>\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">Dataflow Diagram for tasks 001</li>\n            </ol>\n          </nav>\n        </div>\n        <div className=\"row\">\n         \n          <div className=\"col-md-12 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n              <SRD.DiagramWidget className=\"srd-demo-canvas\" diagramEngine={engine} />\n              </div>\n            </div>\n          </div>\n          \n          </div>\n        </div>\n    )\n  }\n}\n\nexport default BasicElements\n"],"sourceRoot":""}